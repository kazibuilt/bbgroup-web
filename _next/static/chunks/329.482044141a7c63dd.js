"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[329,841],{3257:function(e,n,t){let r;t.d(n,{CO:function(){return u},Vn:function(){return o}});var a=t(4352),i=t(959);function o(){let{studio:e}=(0,a.eI)();return e}function u(){let[e,n]=(0,i.useState)(r),a=o();return(0,i.useEffect)(()=>{a&&!r&&Promise.all([t.e(757),t.e(872)]).then(t.t.bind(t,6318,23)).then(e=>{r=e.default,n(e.default)})},[a]),e}},3793:function(e,n,t){t.d(n,{w:function(){return o}});var r=t(959),a=t(2085),i=t(3257);function o(e,n,t){let{onValuesChange:o,lazy:u=!0,deps:l=[]}=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},c=function(e,n,t){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];return(0,r.useMemo)(()=>{if(e)return e.__objects=e.__objects||{},e.__objects[n]&&(e.detachObject(n),delete e.__objects[n]),e.__objects[n]=!0,null==e?void 0:e.object(n,t,{reconfigure:!0})},[e,n,...a])}(e,n,t,l),v=(0,a.bV)(),[f,s]=(0,r.useState)({}),g=(0,r.useRef)({}),x=(0,r.useCallback)(()=>g.current,[]);(0,r.useEffect)(()=>{if(c)return c.onValuesChange(e=>{g.current=e,u||s(e),null==o||o(e)},v)},[c,v,u,...l]);let y=(0,i.CO)();return{get:x,values:f,set:(0,r.useCallback)(e=>{y&&y.transaction(n=>{let{set:t}=n;t(c.props,{...c.value,...e})})},[y,c])}}},4702:function(e,n,t){t.r(n),t.d(n,{WebGLStain:function(){return g}});var r=t(1527),a=t(2485),i=t(2720),o=t(3098),u=t(5060);let l="\n  ".concat("\n  //	Classic Perlin 3D Noise \n  //	by Stefan Gustavson\n  //\n  vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\n  vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n  vec3 fade(vec3 t) {return t*t*t*(t*(t*6.0-15.0)+10.0);}\n\n  float cnoise(vec3 P){\n    vec3 Pi0 = floor(P); // Integer part for indexing\n    vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n    Pi0 = mod(Pi0, 289.0);\n    Pi1 = mod(Pi1, 289.0);\n    vec3 Pf0 = fract(P); // Fractional part for interpolation\n    vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n    vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n    vec4 iy = vec4(Pi0.yy, Pi1.yy);\n    vec4 iz0 = Pi0.zzzz;\n    vec4 iz1 = Pi1.zzzz;\n\n    vec4 ixy = permute(permute(ix) + iy);\n    vec4 ixy0 = permute(ixy + iz0);\n    vec4 ixy1 = permute(ixy + iz1);\n\n    vec4 gx0 = ixy0 / 7.0;\n    vec4 gy0 = fract(floor(gx0) / 7.0) - 0.5;\n    gx0 = fract(gx0);\n    vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n    vec4 sz0 = step(gz0, vec4(0.0));\n    gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n    gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n    vec4 gx1 = ixy1 / 7.0;\n    vec4 gy1 = fract(floor(gx1) / 7.0) - 0.5;\n    gx1 = fract(gx1);\n    vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n    vec4 sz1 = step(gz1, vec4(0.0));\n    gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n    gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n    vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n    vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n    vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n    vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n    vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n    vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n    vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n    vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n    vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n    g000 *= norm0.x;\n    g010 *= norm0.y;\n    g100 *= norm0.z;\n    g110 *= norm0.w;\n    vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n    g001 *= norm1.x;\n    g011 *= norm1.y;\n    g101 *= norm1.z;\n    g111 *= norm1.w;\n\n    float n000 = dot(g000, Pf0);\n    float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n    float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n    float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n    float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n    float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n    float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n    float n111 = dot(g111, Pf1);\n\n    vec3 fade_xyz = fade(Pf0);\n    vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n    vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n    float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \n    return 2.2 * n_xyz;\n  }\n  ","\n  \n  uniform vec2 uResolution;\n  uniform sampler2D uMap;\n  uniform float uGranularity;\n  uniform vec3 uColor;\n  uniform float uOpacity;\n  uniform float uFrequency;\n  uniform float uAmplitude;\n  uniform float uTime;\n  uniform vec2 uOffset;\n\n  uniform sampler2D uDitheringTexture;\n  uniform vec2 uDitheringTextureSize;\n\n  uniform sampler2D uFlowmapTexture;\n\n  varying vec2 vUv;\n  varying vec2 vMeshSize;\n\n  float indexValue(float granularity) {\n    vec2 coords = mod((vUv * vMeshSize) / granularity, uDitheringTextureSize) / uDitheringTextureSize;\n\n    return texture2D(uDitheringTexture, coords).r;\n  }\n\n\n  float dither(float value, float granularity) {\n    float threshold = indexValue(granularity);\n\n    return (value <= threshold) ? 0. : 1.;\n  }\n\n\n    float gammaCorrection(float value, float gamma) {\n        return pow(value, 1.0 / gamma);\n    }\n\n    float luminance(vec3 color) {\n        return (color.r + color.g + color.b) / 3.;\n    }\n\n  vec2 pixelation(vec2 uv, vec2 granularity, vec2 aspect) {\n    vec2 aspectCorrectedUV = (uv - 0.5) * 1. / aspect + 0.5;\n    vec2 aspectCorrectedGranularity = granularity * (1. / aspect);\n\n\n    vec2 textureSize = vMeshSize * aspect;\n    vec2 deltaSize = textureSize - vMeshSize;\n    vec2 borderSize = deltaSize / 2.;\n\n    vec2 offset = mod(borderSize, granularity);\n    offset /= granularity;\n\n\n    float x = aspectCorrectedGranularity.x / vMeshSize.x;\n    float y = aspectCorrectedGranularity.y / vMeshSize.y;\n    float w = 1.0 / x;\n    float z = 1.0 / y;\n\n    return vec2(x,y) * (floor((aspectCorrectedUV * vec2(w,z)) - offset) + 0.5);\n  }\n\n  void main() {\n    vec2 screenAspect = vec2(uResolution.y / uResolution.x, 1.);\n    vec4 flowmap = texture2D(uFlowmapTexture, pixelation(gl_FragCoord.xy / uResolution.xy, vec2(uGranularity * 15.)*screenAspect,vec2(1.)));\n    flowmap.b = clamp(0., flowmap.b, 1.);\n    \n    float granularity = uGranularity + floor(flowmap.b);\n\n    \n    vec2 pixels = pixelation(vUv, vec2(granularity, granularity),vec2(1.,1.));\n    // vec2 pixels = (vUv * vMeshSize) / granularity * 0.001;\n    \n    float noise1 = cnoise(vec3((pixels * vMeshSize * 0.001) + uOffset, uTime + 1000.)) * uAmplitude;\n    noise1 = clamp(noise1, 0., 1.) ;\n\n    float noise2 = cnoise(vec3((pixels * vMeshSize * 0.001) + uOffset, uTime - 1000.)) * uAmplitude;\n    noise2 = clamp(noise2, 0., 1.) ;\n\n    float noise = clamp((noise1 + noise2), 0., 1.) ;\n\n    \n\n    float radialGradient = 1. - distance(pixels, vec2(0.5)) * 2.;\n    radialGradient = smoothstep(0.0, 1.0, radialGradient);\n    radialGradient = clamp(radialGradient, 0., 1.);\n    float alpha =  noise;\n\n    // float alpha = noise;\n\n    gl_FragColor = vec4(uColor, dither(alpha, granularity) * uOpacity * radialGradient);\n    // gl_FragColor = vec4(vec3(1.,0.,0.), alpha);\n\n    // gl_FragColor = vec4(flowmap.b,0.,0,1.);\n  }\n");class c extends u.ShaderMaterial{constructor({frequency:e,amplitude:n}){super({uniforms:{uOffset:{value:new u.Vector2(1e3*Math.random(),1e3*Math.random())},uTime:{value:0},uAmplitude:{value:n},uFrequency:{value:e},uResolution:{value:new u.Vector2(1,1)},uGranularity:{value:5},uDitheringTexture:{value:null},uDitheringTextureSize:{value:new u.Vector2},uFlowmapTexture:{value:null},uOpacity:{value:1},uColor:{value:new u.Color}},vertexShader:"\n  varying vec2 vUv;\n  varying vec2 vMeshSize;\n\n    uniform vec2 uOffset;\n\n  void main() {\n    vUv = uv;\n\n    vMeshSize = vec2(length(modelViewMatrix[0]), length(modelViewMatrix[1]));\n    vMeshSize = roundEven(vMeshSize) - 1.0;\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n",fragmentShader:l,transparent:!0,depthTest:!1,depthWrite:!1}),this.offset=this.uniforms.uOffset.value,this.resolution=this.uniforms.uResolution.value,this.type="StainMaterial"}}var v=t(959),f=t(1086),s=t(8098);function g(e){let{rect:n,fixed:t=!1}=e,u=(0,v.useRef)(),{width:l,height:g}=(0,i.iP)(),[x]=(0,v.useState)(()=>new c({amplitude:1,frequency:1.25})),y=(0,a.A)(e=>{let{size:n}=e;return n}),d=(0,a.A)(e=>{let{viewport:n}=e;return n});(0,v.useEffect)(()=>{let e=d.dpr;x.resolution.set(y.width*e,y.height*e)},[x,y,d]);let{texture:m,size:p,granularity:z,color:h,opacity:P}=(0,f.useDithering)();(0,v.useEffect)(()=>{x.uniforms.uDitheringTexture.value=m,x.uniforms.uDitheringTextureSize.value.copy(p)},[m,p]),(0,v.useEffect)(()=>{x.uniforms.uGranularity.value=z;let{r:e,g:n,b:t}=h;x.uniforms.uColor.value.set(e,n,t),x.uniforms.uOpacity.value=P},[z,h,P]);let{getTexture:w}=(0,s.kB)();return(0,a.C)((e,n)=>{let t=w();x.uniforms.uFlowmapTexture.value=t,x.uniforms.uTime.value+=.1*n},-1),(0,o.LZ)(e=>{let{scroll:r}=e,a=-l/2+n.left+n.width/2,i=g/2-n.top-n.height/2;t||(i+=r),u.current.position.set(a,i,0),u.current.scale.set(n.width,n.height,1),u.current.updateMatrix()},[n,l,g]),(0,r.jsx)("mesh",{ref:u,material:x,matrixAutoUpdate:!1,renderOrder:-1e6,children:(0,r.jsx)("planeGeometry",{})})}}}]);