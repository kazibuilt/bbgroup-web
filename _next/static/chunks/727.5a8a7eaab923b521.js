"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[727],{8098:function(e,r,t){t.d(r,{eo:function(){return _},kB:function(){return E}});var i=t(1527),n=t(2485),s=t(9926),a=t(2499),u=t(2715),o=t(7518),l=t(6484),v=t(6052),h=t(53),c=t(4184),d=t(4479),m=t(5596);let p=new c._(1,1),g=new h.i(-.5,.5,.5,-.5,.001,1e3);g.position.z=1;class f extends m.x{get program(){return this.material}render(e){e.render(this.scene,g)}constructor(e){super(),this.material=e,this.mesh=new d.K(p,this.material),this.scene=new m.x,this.scene.add(this.mesh)}}let x="\nprecision highp float;\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform vec2 texelSize;\nvoid main () {\n    vUv = uv;\n    vL = vUv - vec2(texelSize.x, 0.0);\n    vR = vUv + vec2(texelSize.x, 0.0);\n    vT = vUv + vec2(0.0, texelSize.y);\n    vB = vUv - vec2(0.0, texelSize.y);\n    gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n";function y(e,r){let{wrapS:t,wrapT:i,minFilter:n=a.wem,magFilter:s=n,format:u=a.wk1,internalFormat:o,type:l,depthBuffer:h,stencilBuffer:c}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},d={read:new v.d(e,r,{wrapS:t,wrapT:i,minFilter:n,magFilter:s,format:u,type:l,depthBuffer:h,stencilBuffer:c}),write:new v.d(e,r,{wrapS:t,wrapT:i,minFilter:n,magFilter:s,format:u,type:l,depthBuffer:h,stencilBuffer:c}),swap:()=>{let e=d.read;d.read=d.write,d.write=e}};return o&&(d.read.texture.internalFormat=d.write.texture.internalFormat=o),d}function R(e){switch(e){case 34842:return"RGBA16F";case 33327:return"RG16F";case 33325:return"R16F";case 6408:return a.wk1;case 33319:return a.av9;case 6403:return a.hEm}}function T(e,r,t,i){let n,s;if(n=e.createTexture(),e.bindTexture(e.TEXTURE_2D,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,r,e.RGBA,e.RGBA,0,t,i,null),s=e.createFramebuffer(),e.bindFramebuffer(e.FRAMEBUFFER,s),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0),e.checkFramebufferStatus(e.FRAMEBUFFER)!=e.FRAMEBUFFER_COMPLETE)switch(r){case e.R16F:return T(e,e.RG16F,e.RG,i);case e.RG16F:return T(e,e.RGBA16F,e.RGBA,i);default:return null}return{internalFormat:R(r),format:R(t)}}class D{onMouseDown(){this.mouseDown=!0}onMouseUp(){this.mouseDown=!1}updateMouse(e){e.changedTouches&&e.changedTouches.length&&(e.x=e.changedTouches[0].pageX,e.y=e.changedTouches[0].pageY),void 0===e.x&&(e.x=e.pageX,e.y=e.pageY),this.lastMouse.isInit||(this.lastMouse.isInit=!0,this.lastMouse.set(e.x,e.y));let r=e.x-this.lastMouse.x,t=e.y-this.lastMouse.y;this.lastMouse.set(e.x,e.y);let i=this.renderer.getSize(new o.F);(Math.abs(r)||Math.abs(t))&&this.splats.push({x:e.x/i.width,y:1-e.y/i.height,dx:5*r,dy:-5*t})}splat(e){let{x:r,y:t,dx:i,dy:n}=e,s=this.renderer.getSize(new o.F);this.splatProgram.program.uniforms.uTarget.value=this.velocity.read.texture,this.splatProgram.program.uniforms.aspectRatio.value=s.width/s.height,this.splatProgram.program.uniforms.point.value.set(r,t),this.splatProgram.program.uniforms.color.value.set(i,n,1),this.splatProgram.program.uniforms.radius.value=this.radius/100,this.renderer.setRenderTarget(this.velocity.write),this.splatProgram.render(this.renderer),this.velocity.swap(),this.splatProgram.program.uniforms.uTarget.value=this.density.read.texture,this.renderer.setRenderTarget(this.density.write),this.splatProgram.render(this.renderer),this.density.swap()}update(e){this.renderer.autoClear=!1;for(let e=this.splats.length-1;e>=0;e--)this.splat(this.splats.splice(e,1)[0]);this.curlProgram.program.uniforms.uVelocity.value=this.velocity.read.texture,this.renderer.setRenderTarget(this.curl),this.curlProgram.render(this.renderer),this.vorticityProgram.program.uniforms.uVelocity.value=this.velocity.read.texture,this.vorticityProgram.program.uniforms.uCurl.value=this.curl.texture,this.renderer.setRenderTarget(this.velocity.write),this.vorticityProgram.render(this.renderer),this.velocity.swap(),this.divergenceProgram.program.uniforms.uVelocity.value=this.velocity.read.texture,this.renderer.setRenderTarget(this.divergence),this.divergenceProgram.render(this.renderer),this.clearProgram.program.uniforms.uTexture.value=this.pressure.read.texture,this.clearProgram.program.uniforms.value.value=this.pressureDissipation,this.renderer.setRenderTarget(this.pressure.write),this.clearProgram.render(this.renderer),this.pressure.swap(),this.pressureProgram.program.uniforms.uDivergence.value=this.divergence.texture;for(let e=0;e<this.iterations;e++)this.pressureProgram.program.uniforms.uPressure.value=this.pressure.read.texture,this.renderer.setRenderTarget(this.pressure.write),this.pressureProgram.render(this.renderer),this.pressure.swap();return this.gradienSubtractProgram.program.uniforms.uPressure.value=this.pressure.read.texture,this.gradienSubtractProgram.program.uniforms.uVelocity.value=this.velocity.read.texture,this.renderer.setRenderTarget(this.velocity.write),this.gradienSubtractProgram.render(this.renderer),this.velocity.swap(),this.advectionProgram.program.uniforms.dyeTexelSize.value.set(1/this.simRes),this.advectionProgram.program.uniforms.uVelocity.value=this.velocity.read.texture,this.advectionProgram.program.uniforms.uSource.value=this.velocity.read.texture,this.advectionProgram.program.uniforms.dissipation.value=this.velocityDissipation,this.renderer.setRenderTarget(this.velocity.write),this.advectionProgram.render(this.renderer),this.velocity.swap(),this.advectionProgram.program.uniforms.dyeTexelSize.value.set(1/this.dyeRes),this.advectionProgram.program.uniforms.uVelocity.value=this.velocity.read.texture,this.advectionProgram.program.uniforms.uSource.value=this.density.read.texture,this.advectionProgram.program.uniforms.dissipation.value=this.densityDissipation,this.renderer.setRenderTarget(this.density.write),this.advectionProgram.render(this.renderer),this.density.swap(),this.renderer.autoClear=!0,this.density.read.texture}constructor({renderer:e,size:r=128}={}){let t,i,n,s,h;this.renderer=e,this.simRes=r,this.dyeRes=r,this.iterations=3,this.densityDissipation=.97,this.velocityDissipation=.98,this.pressureDissipation=.8,this.curlStrength=20,this.radius=.2,this.texelSize={value:new o.F(1/this.simRes,1/this.simRes)};let c=this.renderer.getContext(),d=this.renderer.capabilities.isWebGL2;d?(c.getExtension("EXT_color_buffer_float"),i=c.getExtension("OES_texture_float_linear")):(t=c.getExtension("OES_texture_half_float"),i=c.getExtension("OES_texture_half_float_linear"));let m=d?c.HALF_FLOAT:t.HALF_FLOAT_OES;d?(n=T(c,c.RGBA16F,c.RGBA,m),s=T(c,c.RG16F,c.RG,m),h=T(c,c.R16F,c.RED,m)):(n=T(c,c.RGBA,c.RGBA,m),s=T(c,c.RGBA,c.RGBA,m),h=T(c,c.RGBA,c.RGBA,m));let p=i?a.wem:a.TyD;t=d?a.VzW:a.cLu,this.density=y(this.dyeRes,this.dyeRes,{type:t,minFilter:p,format:n.format,internalFormat:n.internalFormat,depthBuffer:!1,stencilBuffer:!1}),this.velocity=y(this.simRes,this.simRes,{type:t,minFilter:p,format:s.format,internalFormat:s.internalFormat,depthBuffer:!1,stencilBuffer:!1}),this.pressure=y(this.simRes,this.simRes,{type:t,minFilter:a.TyD,format:h.format,internalFormat:h.internalFormat,depthBuffer:!1,stencilBuffer:!1}),this.divergence=new v.d(this.simRes,this.simRes,{type:t,minFilter:a.TyD,format:h.format,depthBuffer:!1,stencilBuffer:!1}),this.divergence.texture.internalFormat=h.internalFormat,this.curl=new v.d(this.simRes,this.simRes,{type:t,minFilter:a.TyD,format:h.format,depthBuffer:!1,stencilBuffer:!1}),this.curl.texture.internalFormat=h.internalFormat,this.clearProgram=new f(new u.j({vertexShader:x,fragmentShader:"\nprecision mediump float;\nprecision mediump sampler2D;\nvarying highp vec2 vUv;\nuniform sampler2D uTexture;\nuniform float value;\nvoid main () {\n    gl_FragColor = value * texture2D(uTexture, vUv);\n}\n",uniforms:{texelSize:this.texelSize,uTexture:{value:null},value:{value:this.pressureDissipation}},depthTest:!1,depthWrite:!1})),this.splatProgram=new f(new u.j({vertexShader:x,fragmentShader:"\nprecision highp float;\nprecision highp sampler2D;\nvarying vec2 vUv;\nuniform sampler2D uTarget;\nuniform float aspectRatio;\nuniform vec3 color;\nuniform vec2 point;\nuniform float radius;\nvoid main () {\n    vec2 p = vUv - point.xy;\n    p.x *= aspectRatio;\n    vec3 splat = exp(-dot(p, p) / radius) * color;\n    vec3 base = texture2D(uTarget, vUv).xyz;\n    gl_FragColor = vec4(base + splat, 1.0);\n}\n",uniforms:{texelSize:this.texelSize,uTarget:{value:null},aspectRatio:{value:1},color:{value:new l.P},point:{value:new o.F},radius:{value:1}},depthTest:!1,depthWrite:!1})),this.advectionProgram=new f(new u.j({vertexShader:x,fragmentShader:i?"\nprecision highp float;\nprecision highp sampler2D;\nvarying vec2 vUv;\nuniform sampler2D uVelocity;\nuniform sampler2D uSource;\nuniform vec2 texelSize;\nuniform float dt;\nuniform float dissipation;\nvoid main () {\n    vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n    gl_FragColor = dissipation * texture2D(uSource, coord);\n    gl_FragColor.a = 1.0;\n}\n":"\nprecision highp float;\nprecision highp sampler2D;\nvarying vec2 vUv;\nuniform sampler2D uVelocity;\nuniform sampler2D uSource;\nuniform vec2 texelSize;\nuniform vec2 dyeTexelSize;\nuniform float dt;\nuniform float dissipation;\nvec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n    vec2 st = uv / tsize - 0.5;\n    vec2 iuv = floor(st);\n    vec2 fuv = fract(st);\n    vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n    vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n    vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n    vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n    return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n}\nvoid main () {\n    vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n    gl_FragColor = dissipation * bilerp(uSource, coord, dyeTexelSize);\n    gl_FragColor.a = 1.0;\n}\n",uniforms:{texelSize:this.texelSize,dyeTexelSize:{value:new o.F(1/this.dyeRes,1/this.dyeRes)},uVelocity:{value:null},uSource:{value:null},dt:{value:.016},dissipation:{value:1}},depthTest:!1,depthWrite:!1})),this.divergenceProgram=new f(new u.j({vertexShader:x,fragmentShader:"\nprecision mediump float;\nprecision mediump sampler2D;\nvarying highp vec2 vUv;\nvarying highp vec2 vL;\nvarying highp vec2 vR;\nvarying highp vec2 vT;\nvarying highp vec2 vB;\nuniform sampler2D uVelocity;\nvoid main () {\n    float L = texture2D(uVelocity, vL).x;\n    float R = texture2D(uVelocity, vR).x;\n    float T = texture2D(uVelocity, vT).y;\n    float B = texture2D(uVelocity, vB).y;\n    vec2 C = texture2D(uVelocity, vUv).xy;\n    if (vL.x < 0.0) { L = -C.x; }\n    if (vR.x > 1.0) { R = -C.x; }\n    if (vT.y > 1.0) { T = -C.y; }\n    if (vB.y < 0.0) { B = -C.y; }\n    float div = 0.5 * (R - L + T - B);\n    gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n}\n",uniforms:{texelSize:this.texelSize,uVelocity:{value:null}},depthTest:!1,depthWrite:!1})),this.curlProgram=new f(new u.j({vertexShader:x,fragmentShader:"\nprecision mediump float;\nprecision mediump sampler2D;\nvarying highp vec2 vUv;\nvarying highp vec2 vL;\nvarying highp vec2 vR;\nvarying highp vec2 vT;\nvarying highp vec2 vB;\nuniform sampler2D uVelocity;\nvoid main () {\n    float L = texture2D(uVelocity, vL).y;\n    float R = texture2D(uVelocity, vR).y;\n    float T = texture2D(uVelocity, vT).x;\n    float B = texture2D(uVelocity, vB).x;\n    float vorticity = R - L - T + B;\n    gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n}\n",uniforms:{texelSize:this.texelSize,uVelocity:{value:null}},depthTest:!1,depthWrite:!1})),this.vorticityProgram=new f(new u.j({vertexShader:x,fragmentShader:"\nprecision highp float;\nprecision highp sampler2D;\nvarying vec2 vUv;\nvarying vec2 vL;\nvarying vec2 vR;\nvarying vec2 vT;\nvarying vec2 vB;\nuniform sampler2D uVelocity;\nuniform sampler2D uCurl;\nuniform float curl;\nuniform float dt;\nvoid main () {\n    float L = texture2D(uCurl, vL).x;\n    float R = texture2D(uCurl, vR).x;\n    float T = texture2D(uCurl, vT).x;\n    float B = texture2D(uCurl, vB).x;\n    float C = texture2D(uCurl, vUv).x;\n    vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n    force /= length(force) + 0.0001;\n    force *= curl * C;\n    force.y *= -1.0;\n    vec2 vel = texture2D(uVelocity, vUv).xy;\n    gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n}\n",uniforms:{texelSize:this.texelSize,uVelocity:{value:null},uCurl:{value:null},curl:{value:this.curlStrength},dt:{value:.016}},depthTest:!1,depthWrite:!1})),this.pressureProgram=new f(new u.j({vertexShader:x,fragmentShader:"\nprecision mediump float;\nprecision mediump sampler2D;\nvarying highp vec2 vUv;\nvarying highp vec2 vL;\nvarying highp vec2 vR;\nvarying highp vec2 vT;\nvarying highp vec2 vB;\nuniform sampler2D uPressure;\nuniform sampler2D uDivergence;\nvoid main () {\n    float L = texture2D(uPressure, vL).x;\n    float R = texture2D(uPressure, vR).x;\n    float T = texture2D(uPressure, vT).x;\n    float B = texture2D(uPressure, vB).x;\n    float C = texture2D(uPressure, vUv).x;\n    float divergence = texture2D(uDivergence, vUv).x;\n    float pressure = (L + R + B + T - divergence) * 0.25;\n    gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n}\n",uniforms:{texelSize:this.texelSize,uPressure:{value:null},uDivergence:{value:null}},depthTest:!1,depthWrite:!1})),this.gradienSubtractProgram=new f(new u.j({vertexShader:x,fragmentShader:"\nprecision mediump float;\nprecision mediump sampler2D;\nvarying highp vec2 vUv;\nvarying highp vec2 vL;\nvarying highp vec2 vR;\nvarying highp vec2 vT;\nvarying highp vec2 vB;\nuniform sampler2D uPressure;\nuniform sampler2D uVelocity;\nvoid main () {\n    float L = texture2D(uPressure, vL).x;\n    float R = texture2D(uPressure, vR).x;\n    float T = texture2D(uPressure, vT).x;\n    float B = texture2D(uPressure, vB).x;\n    vec2 velocity = texture2D(uVelocity, vUv).xy;\n    velocity.xy -= vec2(R - L, T - B);\n    gl_FragColor = vec4(velocity, 0.0, 1.0);\n}\n",uniforms:{texelSize:this.texelSize,uPressure:{value:null},uVelocity:{value:null}},depthTest:!1,depthWrite:!1})),this.splats=[],this.lastMouse=new o.F,window.addEventListener("touchstart",this.onMouseDown.bind(this),!1),window.addEventListener("mousedown",this.onMouseDown.bind(this),!1),window.addEventListener("touchstart",this.updateMouse.bind(this),!1),window.addEventListener("touchmove",this.updateMouse.bind(this),!1),window.addEventListener("mousemove",this.updateMouse.bind(this),!1),window.addEventListener("touchend",this.onMouseUp.bind(this),!1),window.addEventListener("mouseup",this.onMouseUp.bind(this),!1)}}var w=t(2085),S=t(3793),P=t(959);let F=(0,P.createContext)();function E(){return(0,P.useContext)(F)}function _(e){let{children:r}=e,t=(0,n.A)(e=>{let{gl:r}=e;return r}),a=(0,P.useMemo)(()=>new D({renderer:t,size:128}),[t]),u=(0,w.st)();(0,S.w)(u,"fluid simulation",{density:s.types.number(.9,{range:[0,1],nudgeMultiplier:.01}),velocity:s.types.number(1,{range:[0,1],nudgeMultiplier:.01}),pressure:s.types.number(0,{range:[0,1],nudgeMultiplier:.01}),curl:s.types.number(0,{range:[0,100],nudgeMultiplier:1}),radius:s.types.number(.4,{range:[0,1],nudgeMultiplier:.01})},{onValuesChange:e=>{let{density:r,velocity:t,pressure:i,curl:n,radius:s}=e;a.curlStrength=n,a.densityDissipation=r,a.velocityDissipation=t,a.pressureDissipation=i,a.radius=s},deps:[a]});let o=(0,P.useRef)(),l=(0,P.useCallback)(()=>o.current,[]);return(0,n.C)(e=>{let{gl:r}=e;o.current=a.update(),r.setRenderTarget(null),r.clear()},-10),(0,i.jsx)(F.Provider,{value:{getTexture:l},children:r})}}}]);