"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[440,841],{3845:function(e,t,n){n.r(t),n.d(t,{WebGLMosaic:function(){return p}});var r=n(1527),a=n(2485),u=n(1690),l=n(1086),o=n(8098),i=n(6131),c=n(7492),s=n(690),v=n(959),d=n(5060);function f(e){let{src:t,position:n,width:f}=e,{DOMTunnel:p}=(0,i.$)(),[h,m]=(0,v.useState)(),[g,x]=(0,v.useState)(),[y,C]=(0,v.useState)(),b=g/y,S=(0,a.A)(e=>{let{gl:t}=e;return t}),M=(0,a.A)(e=>{let{size:t}=e;return t}),A=(0,a.A)(e=>{let{viewport:t}=e;return t}),[w]=(0,v.useState)(()=>new s.V),U=(0,v.useRef)();(0,c.m)(h,e=>{e.minFilter=d.LinearFilter,e.magFilter=d.LinearFilter,e.generateMipmaps=!1,e.colorSpace=S.outputColorSpace,U.current&&(U.current.material.map=e,U.current.material.needsUpdate=!0)});let V=(0,v.useId)();(0,v.useEffect)(()=>{let e=A.dpr;w.resolution.set(M.width*e,M.height*e)},[w,M,A]);let{texture:z,size:D,granularity:j,color:T,opacity:_}=(0,l.useDithering)();(0,v.useEffect)(()=>{w.uniforms.uDitheringTexture.value=z,w.uniforms.uDitheringTextureSize.value.copy(D)},[z,D]),(0,v.useEffect)(()=>{w.uniforms.uGranularity.value=j;let{r:e,g:t,b:n}=T;w.uniforms.uColor.value.set(e,t,n),w.uniforms.uBlending.value=_},[j,T,_]);let{getTexture:k}=(0,o.kB)();return(0,a.C)(()=>{let e=k();w.uniforms.uFlowmapTexture.value=e},-1),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(p.In,{children:(0,r.jsx)(u.Ee,{src:t,alt:"",fill:!0,sizes:"25vw",onLoad:e=>{let{target:t}=e;m(t.currentSrc),x(t.naturalWidth),C(t.naturalHeight)},style:{visibility:"hidden"}},V)}),(0,r.jsx)("group",{position:n,scale:b<1?[b*f,f,1]:[f,1/b*f,1],matrixAutoUpdate:!1,ref:e=>{null==e||e.updateMatrix()},children:(0,r.jsx)("mesh",{ref:U,material:w,matrixAutoUpdate:!1,children:(0,r.jsx)("planeGeometry",{})})})]})}function p(e){let{assets:t=[]}=e,n=(0,v.useMemo)(()=>Array(100).fill(0).map(()=>Math.random()),[]),u=(0,v.useMemo)(()=>Array(100).fill(0).map(()=>2*Math.random()-1),[]),l=(0,v.useMemo)(()=>Array(100).fill(0).map(()=>2*Math.random()-1),[]),o=(0,a.A)(e=>{let{size:t}=e;return t}),i=.4*o.width*.5,c=.65*o.height,s=Math.ceil(t.length/3)*c,d=.12*o.width,p=(0,v.useCallback)(e=>{let t=e%3*i;t+=u[e]*i*.2;let r=-Math.floor(e/3)*c;return r+=l[e]*c*.2,(e-1)%3==0&&(r+=c/2),[t,r,-n[e%n.length]]},[]),h=(0,v.useCallback)(e=>2-n[e%n.length],[]),m=(0,v.useCallback)(e=>2-n[e%n.length],[]),g=(0,v.useRef)([]);return(0,a.C)(e=>{let{clock:t}=e,n=t.getElapsedTime();g.current.forEach((e,t)=>{let r=50*m(t);e.position.y=n*r%s,e.updateMatrix()})}),(0,r.jsx)(r.Fragment,{children:(0,r.jsx)("group",{position:[-i,c,0],matrixAutoUpdate:!1,ref:e=>{null==e||e.updateMatrix()},children:t.map((e,t)=>(0,r.jsxs)("group",{ref:e=>{g.current[t]=e},matrixAutoUpdate:!1,children:[(0,r.jsx)(f,{src:e,position:p(t),width:d*h(t)}),(0,r.jsx)("group",{position:[0,-s,0],matrixAutoUpdate:!1,ref:e=>{null==e||e.updateMatrix()},children:(0,r.jsx)(f,{src:e,position:p(t),width:d*h(t)})})]},t))})})}},3257:function(e,t,n){let r;n.d(t,{CO:function(){return o},Vn:function(){return l}});var a=n(4352),u=n(959);function l(){let{studio:e}=(0,a.eI)();return e}function o(){let[e,t]=(0,u.useState)(r),a=l();return(0,u.useEffect)(()=>{a&&!r&&Promise.all([n.e(757),n.e(872)]).then(n.t.bind(n,6318,23)).then(e=>{r=e.default,t(e.default)})},[a]),e}},3793:function(e,t,n){n.d(t,{w:function(){return l}});var r=n(959),a=n(2085),u=n(3257);function l(e,t,n){let{onValuesChange:l,lazy:o=!0,deps:i=[]}=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},c=function(e,t,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[];return(0,r.useMemo)(()=>{if(e)return e.__objects=e.__objects||{},e.__objects[t]&&(e.detachObject(t),delete e.__objects[t]),e.__objects[t]=!0,null==e?void 0:e.object(t,n,{reconfigure:!0})},[e,t,...a])}(e,t,n,i),s=(0,a.bV)(),[v,d]=(0,r.useState)({}),f=(0,r.useRef)({}),p=(0,r.useCallback)(()=>f.current,[]);(0,r.useEffect)(()=>{if(c)return c.onValuesChange(e=>{f.current=e,o||d(e),null==l||l(e)},s)},[c,s,o,...i]);let h=(0,u.CO)();return{get:p,values:v,set:(0,r.useCallback)(e=>{h&&h.transaction(t=>{let{set:n}=t;n(c.props,{...c.value,...e})})},[h,c])}}},7492:function(e,t,n){n.d(t,{m:function(){return o}});var r=n(2485),a=n(959),u=n(5060);let l=new u.TextureLoader;function o(e,t){let n=(0,r.A)(e=>{let{gl:t}=e;return t}),o=Array.isArray(e),[i,c]=(0,a.useState)(o?[]:void 0),s=(0,a.useRef)([]);return(0,a.useLayoutEffect)(()=>{if(!e)return;let r=[e].flat();return r.forEach((e,a)=>{u.DefaultLoadingManager.itemStart(e),l.load(e,l=>{o?(s.current[a]=l,s.current.filter(e=>e.isTexture).length===r.length&&(c(s.current),null==t||t(s.current))):(c(l),null==t||t(l)),u.DefaultLoadingManager.itemEnd(e),n.initTexture(l)})}),()=>{s.current.map(e=>{e.dispose()}),s.current=[]}},[JSON.stringify(e)]),i}},690:function(e,t,n){n.d(t,{V:function(){return l}});var r=n(6057),a=n(5060);let u="\n  ".concat("\n	vec3 blendNormal(vec3 base, vec3 blend) {\n		return blend;\n	}\n\n	vec3 blendNormal(vec3 base, vec3 blend, float opacity) {\n		return (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\n	}","\n  \n  uniform vec2 uResolution;\n  uniform sampler2D uMap;\n  uniform float uGranularity;\n  uniform vec3 uColor;\n  uniform float uBlending;\n  uniform vec3 uBackgroundColor;\n  uniform float uOpacity;\n  uniform vec2 uAspect;\n  uniform float uScale;\n  uniform vec2 uOffset;\n  \n\n  uniform sampler2D uDitheringTexture;\n  uniform vec2 uDitheringTextureSize;\n\n  uniform sampler2D uFlowmapTexture;\n\n  varying vec2 vUv;\n  varying vec2 vAspectCorrectedUV;\n  varying vec2 vMeshSize;\n\n\n  vec2 scaleUV(vec2 uv, float scale) {\n    // Convert uv range to -1 to 1\n    uv = uv * 2.0 - 1.0;\n    \n    // Scale uv\n    uv *= ((-scale + 1.) * 0.5 + 0.5) * 2.0;\n    \n    // Convert back to 0 to 1 range\n    uv = uv * 0.5 + 0.5;\n\n    return uv;\n  }\n\n\n    float indexValue(float granularity) {\n      vec2 coords = mod((vUv * vMeshSize) / granularity, uDitheringTextureSize) / uDitheringTextureSize;\n\n      return texture2D(uDitheringTexture, coords).r;\n    }\n\n\n    float dither(float value, float granularity) {\n        float threshold = indexValue(granularity);\n\n        return (value <= threshold) ? 0. : 1.;\n    }\n\n\n    float gammaCorrection(float value, float gamma) {\n        return pow(value, 1.0 / gamma);\n    }\n\n    float luminance(vec3 color) {\n        return (color.r + color.g + color.b) / 3.;\n    }\n\n  vec2 pixelation(vec2 uv, vec2 granularity, vec2 aspect) {\n    vec2 aspectCorrectedUV = (uv - 0.5) * 1. / aspect + 0.5;\n    vec2 aspectCorrectedGranularity = granularity * (1. / aspect);\n\n\n    vec2 textureSize = vMeshSize * aspect;\n    vec2 deltaSize = textureSize - vMeshSize;\n    vec2 borderSize = deltaSize / 2.;\n\n    vec2 offset = mod(borderSize, granularity);\n    offset /= granularity;\n\n\n    float x = aspectCorrectedGranularity.x / vMeshSize.x;\n    float y = aspectCorrectedGranularity.y / vMeshSize.y;\n    float w = 1.0 / x;\n    float z = 1.0 / y;\n\n    return vec2(x,y) * (floor((aspectCorrectedUV * vec2(w,z)) - offset) + 0.5);\n  }\n\n  void main() {\n     vec2 screenAspect = vec2(uResolution.y / uResolution.x, 1.);\n    vec4 flowmap = texture2D(uFlowmapTexture, pixelation(gl_FragCoord.xy / uResolution.xy, vec2(uGranularity * 15.) * screenAspect,vec2(1.,1.)));\n\n    flowmap.b = clamp(0., flowmap.b, 1.);\n\n    // TODO: to fix\n    float granularity = uGranularity + floor(flowmap.b);\n    vec2 granularityAspectRatio = granularity * (1./uAspect);\n    // vec2 granularityAspectRatio = vec2(granularity);\n\n    //TODO: to fix vAspectCorrectedUV doesn't match with dithering granularity\n    // vec2 pixelsUv = pixelation(vAspectCorrectedUV, granularityAspectRatio,uAspect);\n\n    vec2 uv = vUv;\n    uv = scaleUV(uv, uScale);\n    uv += uOffset;\n    vec2 pixelsUv = pixelation(uv, vec2(granularity), uAspect);\n    // pixelsUv = vAspectCorrectedUV;\n    \n    \n    vec3 rgb = texture2D(uMap, pixelsUv).rgb;\n    float grayscaled = luminance(rgb);\n    vec3 grayscaledColor = vec3(grayscaled);\n\n    float dithered = dither(grayscaled, granularity);\n    float invertedDithered = 1. - dithered;\n    vec3 ditheredColor = vec3(dithered);\n    // ditheredColor *= uBackgroundColor;\n\n    // vec3 color = blendNormal(grayscaledColor, ditheredColor + uColor, uBlending);\n    // vec3 color = blendNormal(uColor, ditheredColor + uColor, uBlending);\n    // vec3 color = blendNormal(grayscaledColor * uColor, ditheredColor + uColor, uBlending);\n    // color = blendNormal(uBackgroundColor, color, 1.-dithered);\n\n    vec3 color = invertedDithered * uColor + dithered * uBackgroundColor;\n\n    gl_FragColor = vec4(color, uOpacity);\n    \n  }\n");class l extends a.ShaderMaterial{set map(e){this.uniforms.uMap.value=e,this.needsUpdate=!0}set opacity(e){this.uniforms&&(this.uniforms.uOpacity.value=parseFloat(e))}set scale(e){this.uniforms&&(this.uniforms.uScale.value=parseFloat(e))}constructor(){super({uniforms:{uMap:{value:null},uAspect:{value:new a.Vector2(1,1)},uResolution:{value:new a.Vector2(1,1)},uGranularity:{value:2},uDitheringTexture:{value:null},uDitheringTextureSize:{value:new a.Vector2},uFlowmapTexture:{value:null},uColor:{value:new a.Color},uBlending:{value:1},uOpacity:{value:1},uBackgroundColor:{value:new a.Color(r.colors.white)},uScale:{value:1},uOffset:{value:new a.Vector2(0,0)}},vertexShader:"\n  uniform vec2 uAspect;\n  \n\n  varying vec2 vUv;\n  varying vec2 vAspectCorrectedUV;\n  varying vec2 vMeshSize;\n\n  void main() {\n    vUv = uv;\n\n    vAspectCorrectedUV = (uv - 0.5) * 1. / uAspect + 0.5;\n\n    vMeshSize = vec2(length(modelViewMatrix[0]), length(modelViewMatrix[1]));\n\n    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  }\n",fragmentShader:u,transparent:!0}),this.resolution=this.uniforms.uResolution.value,this.aspect=this.uniforms.uAspect.value,this.offset=this.uniforms.uOffset.value,this.type="MediaMaterial"}}}}]);